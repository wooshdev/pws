diff -u Unpatched/Makefile LibreSSL/Makefile
--- Unpatched/Makefile	2020-03-20 14:04:04.509966072 +0000
+++ LibreSSL/Makefile	2020-03-20 14:03:25.885637650 +0000
@@ -13,4 +13,4 @@
 # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 
 server: main.c config.h validator.c
-	$(CC) -g -o $@ main.c -pthread -lm
+	$(CC) -g -o $@ main.c -pthread -lm `pkg-config --static --libs libtls`
diff -u Unpatched/config.h LibreSSL/config.h
--- Unpatched/config.h	2020-03-20 14:00:43.112221443 +0000
+++ LibreSSL/config.h	2020-03-20 14:16:56.500185014 +0000
@@ -62,3 +62,38 @@
 const char *serverName = "pws";
 
 
+/** LibreSSL **/
+/**
+ * The private key file of the certificate.
+ *
+ * When you're using letsencrypt, this is:
+ * /etc/letsencrypt/live/<domain>/privkey.pem
+ */
+const char *TLSKeyFile = "";
+/**
+ * The certificate file of the certificate.
+ *
+ * To suffice the requirements of SSLLabs, make sure this file contains
+ * the intermediate certificates of your certificate issuer.
+ *
+ * When you're using letsencrypt, this is:
+ * /etc/letsencrypt/live/<domain>/cert.pem
+ * or, (probably better:)
+ * /etc/letsencrypt/live/<domain>/fullchain.pem
+ *
+ * The latter contains your intermediates.
+ */
+const char *TLSCertFile = "";
+/**
+ * The supported TLS protocols.
+ *
+ * You can choose from: (as of LibreSSL 3.0.2:)
+ * - TLS_PROTOCOL_TLSv1_0 (insecure)
+ * - TLS_PROTOCOL_TLSv1_1 (insecure)
+ * - TLS_PROTOCOL_TLSv1_2
+ * - TLS_PROTOCOL_TLSv1_3 (unsupported)
+ *
+ * See <https://man.openbsd.org/tls_config_set_protocols.3#tls_config_set_protocols>
+ * for an updated list of supported protocols.
+ */
+uint32_t TLSProtocols = TLS_PROTOCOL_TLSv1_2; /* TLS 1.3 isn't supported by LibreSSL yet. */
Common subdirectories: Unpatched/files and LibreSSL/files
diff -u Unpatched/main.c LibreSSL/main.c
--- Unpatched/main.c	2020-03-20 14:05:12.318536714 +0000
+++ LibreSSL/main.c	2020-03-20 14:06:50.191348687 +0000
@@ -41,6 +41,8 @@
 #include <sys/stat.h>
 #include <unistd.h>
 
+#include <tls.h>
+
 #include "config.h"
 #include "validator.c"
 
@@ -67,6 +69,7 @@
 
 struct Thread {
 	pthread_t thread;
+	struct tls *tlsContext;
 	int socket;
 	int alive;
 	struct HTTPData httpData;
@@ -83,6 +86,79 @@
 int createTestIndexHtmlFile = 1;
 char *filesDirectory;
 
+/* LibreSSL Stuff */
+struct tls_config *TLSConfiguration;
+struct tls *TLSContext;
+
+int SetupTLS(void) {
+	TLSConfiguration = tls_config_new();
+	if (!TLSConfiguration) {
+		const char *errorMessage = tls_config_error(NULL);
+		if (!errorMessage)
+			errorMessage = "(Failed to load error message!)";
+		fprintf(stderr, CRED"Failed to setup libtls: %s"CNRM"\n", errorMessage);
+		return 0;
+	}
+
+	if (tls_config_set_keypair_file(TLSConfiguration, TLSCertFile, TLSKeyFile) == -1) {
+		const char *errorMessage = tls_config_error(TLSConfiguration);
+		if (!errorMessage)
+			errorMessage = "(Failed to load error message!)";
+		fprintf(stderr, CRED"Failed to add certificate and key pair file: %s"CNRM"\n", errorMessage);
+		tls_config_free(TLSConfiguration);
+		TLSConfiguration = NULL;
+		return 0;
+	}
+
+	tls_config_prefer_ciphers_server(TLSConfiguration);
+
+	if (tls_config_set_protocols(TLSConfiguration, TLSProtocols) == -1) {
+		const char *errorMessage = tls_config_error(TLSConfiguration);
+		if (!errorMessage)
+			errorMessage = "(Failed to load error message!)";
+		fprintf(stderr, CRED"Failed to set TLS protocols: %s"CNRM"\n", errorMessage);
+		tls_config_free(TLSConfiguration);
+		TLSConfiguration = NULL;
+		return 0;
+	}
+
+	TLSContext = tls_server();
+	if (!TLSContext) {
+		const char *errorMessage = tls_config_error(TLSConfiguration);
+		if (!errorMessage)
+			errorMessage = "(Failed to load error message!)";
+		fprintf(stderr, CRED"Failed to create libtls server context: %s"CNRM"\n", errorMessage);
+		tls_config_free(TLSConfiguration);
+		TLSConfiguration = NULL;
+		return 0;
+	}
+
+	if (tls_configure(TLSContext, TLSConfiguration) == -1) {
+		const char *errorMessage = tls_config_error(TLSConfiguration);
+		if (!errorMessage)
+			errorMessage = "(Failed to load error message!)";
+		fprintf(stderr, CRED"Failed to configure libtls server context: %s"CNRM"\n", errorMessage);
+		tls_free(TLSContext);
+		TLSContext = NULL;
+		tls_config_free(TLSConfiguration);
+		TLSConfiguration = NULL;
+		return 0;
+	}
+
+	return 1;
+}
+
+void DestroyTLS(void) {
+	if (TLSContext) {
+		tls_free(TLSContext);
+		TLSContext = NULL;
+	}
+	if (TLSConfiguration) {
+		tls_config_free(TLSConfiguration);
+		TLSConfiguration = NULL;
+	}
+}
+
 #define TIME_FORMAT "%a, %d %h %Y %T %z"
 static char *FormatDate(time_t the_time) {
 	char *value = calloc(128, sizeof(char));
@@ -196,6 +272,10 @@
 }
 
 void CleanUpClient(struct Thread *currentThread) {
+	if (currentThread->tlsContext) {
+		tls_free(currentThread->tlsContext);
+		currentThread->tlsContext = NULL;
+	}
 	if (currentThread->socket != 0) {
 		shutdown(currentThread->socket, SHUT_WR);
 		close(currentThread->socket);
@@ -232,11 +312,11 @@
  *
  * 'dest' should be a valid address and max should be greater than 0.
  */
-int ReadUntil(int fd, char *dest, size_t max, char match) {
+int ReadUntil(struct tls *ctx, char *dest, size_t max, char match) {
 	size_t pos = 0;
 
 	do {
-		int status = read(fd, dest+pos, 1);
+		int status = tls_read(ctx, dest+pos, 1);
 		if (status != 1) {
 			dest[pos] = 0;
 			if (logWarnings)
@@ -258,7 +338,7 @@
  * Sends HTTP response metadata: response-line and headers.
  * additionalHeaders can be NULL.
  */
-void SendResponseMetadata(int fd, const char *status, const char *additionalHeaders, size_t bodyLength) {
+void SendResponseMetadata(struct tls *ctx, const char *status, const char *additionalHeaders, size_t bodyLength) {
 	size_t formatChars = 11;
 	const char *responseFmt = "HTTP/1.1 %s\r\nContent-Length: %zu\r\nConnection: close\r\nDate: %s\r\nServer: %s\r\n\r\n";
 	/* TODO Check for NULL ?*/
@@ -272,7 +352,7 @@
 		(additionalHeaders == NULL ? 0 : strlen(additionalHeaders));
 	char *response = malloc(length);
 	int writtenOctets = snprintf(response, length, responseFmt, status, bodyLength, date, serverName);
-	write(fd, response, writtenOctets);
+	tls_write(ctx, response, writtenOctets);
 	free(date);
 	free(response);
 }
@@ -280,6 +360,12 @@
 void *HandleClient(void *data) {
 	struct Thread *currentThread = (struct Thread *) data;
 
+	if (tls_accept_socket(TLSContext, &currentThread->tlsContext, currentThread->socket) == -1) {
+		fputs("Failed to tls_accept_socket: <todo>\n", stderr);
+		CleanUpClient(currentThread);
+		return NULL;
+	}
+
 	currentThread->httpData.method  = malloc(HTTPDATA_SZMETHOD);
 	currentThread->httpData.path    = malloc(HTTPDATA_SZPATH);
 	currentThread->httpData.version = malloc(HTTPDATA_SZVERSION);
@@ -299,7 +385,7 @@
 	currentThread->httpData.version[0] = 0;
 
 	int status;
-	status = ReadUntil(currentThread->socket, currentThread->httpData.method, HTTPDATA_SZMETHOD, ' ');
+	status = ReadUntil(currentThread->tlsContext, currentThread->httpData.method, HTTPDATA_SZMETHOD, ' ');
 	if (status < 0) {
 		if (logWarnings)
 			fprintf(stderr, CYEL"\tWarning: Read method error: %i (\"%s\")\n"CNRM, status, currentThread->httpData.method);
@@ -316,7 +402,7 @@
 		return NULL;
 	}
 
-	status = ReadUntil(currentThread->socket, currentThread->httpData.path, HTTPDATA_SZPATH, ' ');
+	status = ReadUntil(currentThread->tlsContext, currentThread->httpData.path, HTTPDATA_SZPATH, ' ');
 	if (status < 0) {
 		if (logWarnings)
 			fprintf(stderr, CYEL"Warning: Read path error: %i (\"%s\")\n"CNRM, status, currentThread->httpData.path);
@@ -324,7 +410,7 @@
 		return NULL;
 	}
 
-	status = ReadUntil(currentThread->socket, currentThread->httpData.version, HTTPDATA_SZVERSION, '\r');
+	status = ReadUntil(currentThread->tlsContext, currentThread->httpData.version, HTTPDATA_SZVERSION, '\r');
 	if (status < 0) {
 		if (logWarnings)
 			fprintf(stderr, CYEL"Warning: Read version error: %i (\"%s\")\n"CNRM, status, currentThread->httpData.method);
@@ -353,7 +439,7 @@
 			 * overflow error. */
 			memcpy(response + writtenOctets, content, strlen(content));
 		}
-		status = write(currentThread->socket, response, length);
+		status = tls_write(currentThread->tlsContext, response, length);
 		free(date);
 		free(response);
 		CleanUpClient(currentThread);
@@ -371,8 +457,8 @@
 			perror("-> Message");
 		}
 		size_t size = strlen(HTMLNotFoundPage);
-		SendResponseMetadata(currentThread->socket, "404 Not Found", NULL, size);
-		write(currentThread->socket, HTMLNotFoundPage, size);
+		SendResponseMetadata(currentThread->tlsContext, "404 Not Found", NULL, size);
+		tls_write(currentThread->tlsContext, HTMLNotFoundPage, size);
 		CleanUpClient(currentThread);
 		return NULL;
 	}
@@ -405,8 +491,8 @@
 			}
 
 			size_t size = strlen(message);
-			SendResponseMetadata(currentThread->socket, "200 OK", NULL, size);
-			write(currentThread->socket, message, size);
+			SendResponseMetadata(currentThread->tlsContext, "200 OK", NULL, size);
+			tls_write(currentThread->tlsContext, message, size);
 			free(message);
 			CleanUpClient(currentThread);
 			return NULL;
@@ -420,7 +506,7 @@
 
 	size_t fileSize = (size_t) fstat_info.st_size;
 
-	SendResponseMetadata(currentThread->socket, "200 OK", NULL, fileSize);
+	SendResponseMetadata(currentThread->tlsContext, "200 OK", NULL, fileSize);
 
 	size_t pos = 0;
 	ssize_t octetsJustRead;
@@ -438,7 +524,7 @@
 			break;
 		}
 
-		write(currentThread->socket, buffer, octetsJustRead);
+		tls_write(currentThread->tlsContext, buffer, octetsJustRead);
 	} while (pos += octetsJustRead < fileSize);
 
 	free(buffer);
@@ -554,6 +640,13 @@
 		return EXIT_FAILURE;
 	}
 
+	/* TLS Configuration + Context setup */
+	if (!SetupTLS()) {
+		fputs(CRED"Failed to setup TLS Configuration and/or Context."CNRM"\n", stderr);
+		free(filesDirectory);
+		return EXIT_FAILURE;
+	}
+
 	/* Server socket setup */
 	struct sockaddr_in addr;
 	addr.sin_family = AF_INET;
@@ -563,6 +656,7 @@
 	sockfd = socket(AF_INET, SOCK_STREAM, 0);
 	if (sockfd < 0) {
 		perror("Failed to create socket");
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -574,6 +668,7 @@
 	int flags = fcntl(sockfd, F_GETFL);
 	if (flags == -1) {
 		perror("Failed to get server socket flags");
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -581,6 +676,7 @@
 	if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
 		perror("Unable to bind to address");
 		printf("Port: %hu\n", port);
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -588,6 +684,7 @@
 	if (listen(sockfd, 1) < 0) {
 		perror("Unable to listen");
 		printf("Port: %hu\n", port);
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -596,6 +693,7 @@
 	if (status != 0) {
 		close(sockfd);
 		fprintf(stderr, CRED"POSIX Mutex error: %s\n"CNRM, strerror(status));
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -605,6 +703,7 @@
 		pthread_mutex_destroy(&threadsMutex);
 		close(sockfd);
 		fprintf(stderr, CRED"POSIX Thread Attribute error: %s\n"CNRM, strerror(status));
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -615,6 +714,7 @@
 		pthread_mutex_destroy(&threadsMutex);
 		close(sockfd);
 		fprintf(stderr, CRED"Allocation error! Thread count %hu may be too much?\n"CNRM, threadCount);
+		DestroyTLS();
 		free(filesDirectory);
 		return EXIT_FAILURE;
 	}
@@ -705,6 +805,7 @@
 	pthread_attr_destroy(&threadsAttributes);
 	pthread_mutex_destroy(&threadsMutex);
 
+	DestroyTLS();
 	free(filesDirectory);
 
 	puts(CGRN"Stopped succesfully."CNRM);
